# ===============================
# SQL QUERIES
# ===============================


# ===============================
# AchievementDaoImpl
# ===============================

achievement.all = SELECT * FROM achievement
achievement.create = INSERT \
  INTO achievement(title, image, quiz_amount, created_amount, user_id, cat_id) \
  VALUES (?, ?, ?, ?, ?, ?);
achievement.user = SELECT A.title, A.quiz_amount, UA.played \
FROM achievement A \
LEFT OUTER JOIN (SELECT A.title, COUNT(QTC.cat_id) AS played \
FROM user_to_ses US \
INNER JOIN session S ON US.ses_id = S.id \
INNER JOIN quiz_to_categ QTC ON QTC.quiz_id = S.quiz_id \
INNER JOIN achievement A ON A.cat_id = QTC.cat_id \
WHERE US.user_id = ? \
GROUP BY QTC.cat_id, A.title) AS UA ON A.title = UA.title

# ===============================
# UserInviteDaoImpl
# ===============================

user.send = INSERT INTO friend_to(activated, invite_text, invite_date, user_id_from, user_id_to) \
  VALUES (?, ?, ?, ?, ?)
user.getUserInvite = SELECT F.id, F.invite_text, U.username \
  FROM friend_to F \
  INNER JOIN users U ON U.id = F.user_id_from \
  WHERE F.user_id_to = ? AND F.activated = false
user.getFriendsList = SELECT id, username \
  FROM users \
  WHERE id IN \
  (SELECT user_id_from \
  FROM friend_to WHERE user_id_to = ? AND activated = true) OR id IN \
  (SELECT user_id_to \
  FROM friend_to \
  WHERE user_id_from = ? AND activated = true)
user.accept = UPDATE friend_to \
  SET activated = true \
  WHERE id = ?
user.decline = DELETE FROM friend_to \
  WHERE id = ?
user.deleteFriendFromList = DELETE FROM friend_to \
  WHERE user_id_from = ? AND user_id_to = ? \
  OR user_id_to = ? AND user_id_from = ?
# ===============================
# AnnouncementDaoImpl
# ===============================
create.announcement = INSERT INTO announcement(title, text, date, image, status_id, cat_id, user_id) \
  VALUES (?, ?, ?, ?, ?, ?, ?)
update.announcement = UPDATE announcement set \
  title = ?, text = ?, date = ?, image = ?, status_id = ?, cat_id = ?, user_id = ? where id = ?
delete.announcement = DELETE from announcement where id = ?
get.created.announcement = select an.id, an.title, an.text, an.date, an.image, an.status_id, an.cat_id, an.user_id \
  from announcement  an where status_id = 1
get.all.announcement = select an.id, an.title, an.text, an.date, an.image, an.status_id, an.cat_id, an.user_id \
  from announcement  an where status_id <> 1 order by an.status_id desc, an.date desc;
approve.announcement = UPDATE announcement set status_id = 2  where id = ?
# ===============================
# NotificationDaoImpl
# ===============================
create.notification = INSERT INTO notification( text, seen, date, cat_id, user_id) values( ?, ?, ?, ?, ?)
update.notification = UPDATE notification set  text = ?, seen = ?, date = ?,  cat_id = ?, user_id = ? where id = ?
delete.notification = DELETE from notification where id = ?
set.setting.notification = INSERT INTO not_setting(cat_id, user_id, enabled) \
  values( ?, ?, ?) ON CONFLICT \
  ON CONSTRAINT not_setting_pkey DO UPDATE set enabled = ?
get.notification.settings = select nt.cat_id, nt.user_id, nt.enabled from not_setting nt where nt.user_id = ? order by nt.cat_id
get.all.notification = select nt.id, nt.text, nt.seen, nt.date, nt.cat_id, nt.user_id \
  from notification nt \
  where nt.cat_id not in \
  (select setting.cat_id from public.not_setting setting where setting.enabled = false and setting.user_id = ?) \
  and nt.user_id = ? order by nt.date desc
# ===============================
# QuizDaoImpl
# ===============================
search.quiz = SELECT DISTINCT Q.id,Q.title,Q.date,Q.description,Q.image,Q.status_id, Q.user_id, QS.name as status_name \
  FROM quiz Q INNER JOIN quiz_to_categ QTC ON Q.id = QTC.quiz_id \
  INNER JOIN quiz_category QC ON QC.id = QTC.cat_id \
  INNER JOIN quiz_status QS ON QS.id = Q.status_id \
  INNER JOIN users U ON Q.user_id = U.id \
  WHERE (LOWER(Q.title) LIKE LOWER(?) or LOWER(Q.description) LIKE LOWER(?)) AND Q.status_id = 2 AND QC.name IN (?, ?, ?, ?, ?) AND Q.date >= (CURRENT_DATE - INTERVAL '10 YEAR') AND U.username LIKE ?
